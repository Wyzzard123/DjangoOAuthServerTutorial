"""
Django settings for DjangoOauthTutorial project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from socket import gethostname
from random import SystemRandom

from environ import Env
from django.contrib.messages import constants as messages
from django.utils.timezone import timedelta

# Read-in config
BASE_DIR = os.getcwd()
env = Env()
if Path(BASE_DIR, 'config', '.env').is_file():
    env.read_env(str(Path(BASE_DIR, 'config', '.env')))

# For the first tutorial, allow CORS requests from all domains.
CORS_ORIGIN_ALLOW_ALL = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    'SECRET_KEY',
    str,
    ''.join([SystemRandom().choice('abcdefghijklmnopqrstuvwxyz0123456789') for i in range(50)]),
)

# Branch specific configuration
if env('PROD', bool, False):
    DEBUG = False
    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    DEBUG = True

ALLOWED_HOSTS = tuple(env('ALLOWED_HOSTS', list, ['localhost', '127.0.0.1', gethostname(), '*']))
ADMINS = [x.split(':') for x in env('DJANGO_ADMINS', list, ['Admin:admin@avodaq.com'])]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dj_auth_server.apps.DjAuthServerConfig',

    # Add oauth2 provider and cors headers to installed apps.
    'oauth2_provider',
    'corsheaders',
]

MIDDLEWARE = [
    # Add CORS Middleware as high as possible, esp. before any middleware that can generate responses such as
    #  Django's CommonMiddleware or Whitenoise's WhiteNoiseMiddleware. If it is not before these, it will not be able to
    #  add the CORS headers to these responses.
    'corsheaders.middleware.CorsMiddleware',


    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoOauthTutorial.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Put your apps here

TEMPLATES[0]['DIRS'].append(
        os.path.join(BASE_DIR, 'dj_auth_server', 'templates'),
)

WSGI_APPLICATION = 'DjangoOauthTutorial.wsgi.application'

# Authentication configuration
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


# Databases configuration
DATABASES = {
    'default': env.db(default='sqlite:////{}'.format(os.path.join(BASE_DIR, 'db.sqlite3'))),
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Set to 587 if using an EC2 instance.
EMAIL_PORT = env('EMAIL_PORT', int, 25)

# e-Mail Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'outlook.office365.com'
EMAIL_HOST_USER = env('EMAIL_HOST_USER', str, '')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env('EMAIL_FROM', str, '')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', str, '')
ALERT_EMAIL_RECIPIENTS = env('ALERT_EMAIL_RECIPIENTS', tuple, '')

# Internationalization configuration
LANGUAGE_CODE = env('LANGUAGE_CODE', str, 'en-us')
TIME_ZONE = 'Asia/Singapore'
USE_I18N = True
USE_L10N = True
DATETIME_FORMAT = "d.m.Y, H:i"
USE_TZ = True

# Static files (CSS, JavaScript, Images) configuration
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# STATIC_URL = '/static/'
STATIC_URL = env(
    'STATIC_URL',
    cast=str,
    default='/static/'
)

STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'avodaq_dynatrace_snapshot_service', 'static/'),
    os.path.join(BASE_DIR, 'avodaq_dynatrace_snapshot_service', 'static_assets/'),
]


# Media files (Downloads, secured Files) configuration
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'

# Logging configuration
Path('log').mkdir(exist_ok=True)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        },
    },
    'handlers': {
        'file': {
            'level': env('LOGGING_LEVEL_FILE', str, 'DEBUG'),
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 10,
            'filename': 'log/debug.log',
            'formatter': 'standard',
            'encoding': 'utf8',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'console': {
            'level': env('LOGGING_LEVEL_CONSOLE', str, 'DEBUG' if DEBUG else 'INFO'),
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['file', 'mail_admins', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

if env('LOGTAIL', bool, False):
    INSTALLED_APPS.append('django_logtail')
    LOGTAIL_FILES = {'django': 'log/debug.log'}




# Set this to avodaq.com.sg or localhost or wherever the main link is. This is for us to append a path to at the end.
BASE_URL = env('BASE_URL', str, 'http://127.0.0.1:8000')
